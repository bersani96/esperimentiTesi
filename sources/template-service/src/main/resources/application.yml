# application.yml 
---

#logging.level.esperimenti.templateservice: DEBUG

spring: 
  #application:
  #  name: template
  kafka:
    bootstrap-servers: kafka-svc:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: ${template.kafka.groupid}
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring:
          json:
            trusted:
              packages: "*"
  sleuth:
    sampler:
      probability: 100
  zipkin:
    baseUrl: http://zipkin:9411/

#eureka:
#  client:
#    healthcheck:
#      enabled: true   # Determina lo status dell'applicazione e aggiorna eureka quando manda l'heartbeat
#    serviceUrl:
##     defaultZone: http://localhost:8761/eureka/ check this url
#      defaultZone: http://eureka:8761/eureka/
## leave eureka.instance.leaseRenewalIntervalInSeconds unchanged in production
## just here to provide quicker updates to Eureka for demos
#  instance:
#    leaseRenewalIntervalInSeconds: 10
#    metadataMap:
#      instanceId: ${spring.application.name}:${random.value}

# Porta casuale
server: 
  #port: ${PORT:${SERVER_PORT:0}}
  port: 8080

# Kafka
template:
  kafka:
    groupid: ${spring.application.name}
    channel:
      in: ${spring.application.name}

# HEALTH ENDPOINT
# Use "*" to expose all endpoints, or a comma-separated list to expose selected ones
management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
  endpoint:
    health:
      show-details: always    # Espone dettagli sul health endpoint


